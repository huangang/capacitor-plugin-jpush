{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\nimport type { PluginListenerHandle, PermissionState } from '@capacitor/core';\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    JPush?: {\n      /**\n       * 推送服务的基础信息设置，必填项，否则推送服务不会初始化\n       */\n      appKey: string;\n      channel?: string;\n      isProduction?: boolean;\n      /**\n       * 设备返回前台是,是否自动清空角标,默认 false\n       */\n      cleanBadgeWhenActive?: boolean;\n    };\n  }\n}\n\nexport interface JPushPlugin {\n  /**\n   * 启动极光推送服务，即使没有获取到通知权限，也会进行推送服务初始化\n   */\n  startJPush(): Promise<void>;\n  /**\n   * 开启 debug 模式 log日志\n   * @param isDebug\n   */\n  setDebugMode(isDebug: boolean): Promise<void>;\n  /**\n   * 设置推送别名，可作为推送消息的目标对象\n   * @param options\n   */\n  setAlias(options: AliasOptions): Promise<void>;\n  /**\n   * 删除推送别名\n   * @param options\n   */\n  deleteAlias(options?: DeleteAlias): Promise<void>;\n  /**\n   * 设置推送标签\n   * @param options\n   */\n  addTags(options: SetTagsOptions): Promise<void>;\n  /**\n   * 删除推送标签\n   * @param options\n   */\n  deleteTags(options: SetTagsOptions): Promise<void>;\n  cleanTags(): Promise<void>;\n  /**\n   * 设置 APP 角标数字，设为 0 即清空角标\n   * @param options\n   */\n  setBadgeNumber(options?: SetBadgeNumberOptions): Promise<void>;\n  removeListeners(): Promise<void>;\n  /**\n   * 获取设备的注册 ID，若服务重新注册，则返回的 ID 是不一样的\n   */\n  getRegistrationID(): Promise<{ registrationId: string }>;\n  /**\n   * 检查通知权限状态\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  /**\n   * 申请通知权限\n   */\n  requestPermissions(): Promise<PermissionStatus>;\n  /**\n   * 打开推送通知权限设置页面（目前仅安卓支持）\n   */\n  openNotificationSetting(): Promise<void>;\n  /**\n   * 监听推送消息\n   * @param eventName\n   * @param listenerFunc\n   */\n  addListener(\n    eventName: 'notificationReceived',\n    listenerFunc: (notificationData: ReceiveNotificationData) => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * 监听消息栏通知被点击\n   * @param eventName\n   * @param listenerFunc\n   */\n  addListener(\n    eventName: 'notificationOpened',\n    listenerFunc: (notificationData: ReceiveNotificationData) => void,\n  ): Promise<PluginListenerHandle>;\n}\n\nexport interface AliasOptions {\n  alias: string;\n  sequence?: number;\n}\n\nexport interface DeleteAlias {\n  sequence?: number;\n}\n\nexport interface SetTagsOptions {\n  tags: string[];\n}\n\nexport interface SetBadgeNumberOptions {\n  badge: number;\n}\n\nexport interface RegistrationIdReceive {\n  registrationId: string;\n}\n\nexport interface ReceiveNotificationData {\n  title: string;\n  content: string;\n  subTitle: string;\n  rawData: {\n    aps: {\n      alert: {\n        body: string;\n        subTitle: string;\n        title: string;\n      };\n      badge: number;\n      sound: string;\n    };\n    [x: string]: any;\n  };\n}\n\nexport interface PermissionStatus {\n  /**\n   * prompt: 首次申请，询问。\n   * prompt-with-rationale： 每次都询问。\n   * granted： 已获取权限。\n   * denied：权限已拒绝。\n   */\n  permission: PermissionState;\n}\n"]}